= title('Flags')
%p
  Players must retrieve flags and return them to a net region.

%p
  %code NOTE:
  This module requires the use of the
  :xmlcode
    <zones>
  module.

%p
  Flags belong inside of the
  :xmlcode
    <objectives/>
  element. The
  :xmlcode
    <flag/>
  tag inherits attributes from parent
  :xmlcode
    <flags/>
  as demonstrated below.

:xml
  <objectives>
    <flag owner="green" post="green-post" color="green"/>
    <flag owner="blue" post="blue-post" color="blue"/>

    <!-- This will achieve the exact same result aa above -->
    <flags owner="green">
      <flag post="green-post" color="green"/>
    </flags>
    <flags owner="green">
      <flag post="blue-post" color="blue"/>
    </flags>
  </objectives>

= attribute_table('Flag Attributes') do
  = attribute_row_id(false)
  = attribute_row do
    = attribute_name('color')
    = attribute_desc('The color of the flag.')
    = attribute_type(:dye)
    = attribute_default('white')
  = attribute_row(true) do
    = attribute_name('owner')
    = attribute_desc('The team that owns the flag.')
    = attribute_type_element(:team)
    = attribute_column
  = attribute_row(true) do
    = attribute_name('post')
    = attribute_desc('The zone that contains the area where the flag should be initially spawned.')
    = attribute_type_element(:zone)
    = attribute_column
  = attribute_row do
    = attribute_name('carry-check')
    = attribute_desc('Check to run against player before they can pick up the flag.')
    = attribute_type_element(:check)
    = attribute_column
  = attribute_row do
    = attribute_name('recover-time')
    = attribute_desc("Time after a flag is dropped before it is respawned at it's post.")
    = attribute_type(:duration)
    = attribute_default(30)
  = attribute_row do
    = attribute_name('highlight-holder')
    = attribute_desc('Spawn a particle effect over a player who is carrying the flag.')
    = attribute_type(:boolean)
    = attribute_default('true')
  = attribute_row do
    = attribute_name('highlight-delay')
    = attribute_desc('Delay after a flag is picked up to display a particle effect over a player who is carrying the flag.')
    = attribute_type(:duration)
    = attribute_default(0)
  = attribute_row do
    = attribute_name('permanent')
    = attribute_desc('If the flag can only be captured once. If this is true and the flag is captured, it will be marked as completed.')
    = attribute_type(:boolean)
    = attribute_default(false)
  = attribute_metric_row("net", "Calculation metric used to calculate flag distance from net when carried", "player", false)
  = attribute_metric_row("flag", "Calculation metric used to calculate player's distance from flag when not carried", "player", false)
  = attribute_row do
    = attribute_name('carrying-points')
    = attribute_desc('Number of points the carrier should receive while holding the flag.')
    = attribute_type(:number)
    = attribute_default(0)
  = attribute_row do
    = attribute_name('carrying-points-delay')
    = attribute_desc('Delay before points should be earned.')
    = attribute_type(:duration)
    = attribute_column
  = attribute_row do
    = attribute_name('carrying-points-growth')
    = attribute_desc('Delay before amount of points earned should be doubled.')
    = attribute_type(:duration)
    = attribute_column

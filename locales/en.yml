---
en:
  generic:
    note: "NOTE:"
  table:
    name: "Name"
    description: "Description"
    information: "Information Type"
    type: "Type"
    notes: "Notes"
    format: "Format"
  pages:
    modules: Modules
    references: References
    contribute: Contribute
    examples: Examples
    maps: Maps
    map: Map
    authors: Authors
    includes: Includes
    teams: Teams
    spawns: Spawns
    phases: Destroyable Phases
    regions: Regions
    objectives: Objectives
    loadouts: Items & Loadouts
    kits: Kits
    events: Events
    channels: Chat Channels
    conditions: Conditions
    triggers: Triggers
    resource-packs: Custom Resource Packs
    monuments: Monuments
    hills: Hills
    flags: Flags
    colors: Colors
    wools: Wools
    leakables: Leakables
    checks: "Checks"
    decay: Block Phases/Decay
    world: "World"
    zones: "Zones"
    localization: "Localization"
    items_and_drops: "Items & Drops"
    compasses: "Compasses"
    damage: "Damage"
    elimination: "Elimination"
    kills-deaths: "Kills/Deaths"
    projectiles: "Custom Projectiles"
    results: "Results"
    broadcasts: "Broadcasts"
    chests: "Chest Generation"
  home:
    main: >
      Atlas Game Manager is a Minecraft server modification for
      <a href="https://spigotmc.org">Spigot</a>
      that powers multiplayer, objective-based game modes within Minecraft. Much like the
      <a href="http://www.forgehub.com/">Forge</a>
      game mode of the popular video game franchise,
      <a href="https://www.halowaypoint.com">Halo</a>,
      one can create their own game modes through modifying the actual layout and design of the world, spawn points, team colors, game rules, weapons, tools, objectives and more.
      Though unlike in Halo Forge, Minecraft is designed around building and design, which enables Atlas map developers to create completely unique maps not based around
      a pre-existing map. Atlas is also an ever-evolving platform that is driven by the community and the developers behind it.
    about: >
      <p>
        This website documents how to create your own maps for the Atlas plugin. Each map has two components:
      </p>
      <ol>
        <li>
          Minecraft world containing
          <code>level.dat</code>
          and the
          <code>regions</code>
          folder.
        </li>
        <li>
          The XML map configuration file,
          <code>map.xml</code>
          . This defines the elements of the map such as spawn points, team colors, names, and more.
        </li>
      </ol>
      <p>
        This website primarily focuses on the latter, but a tutorial and guidelines for creating an Atlas map world can be
        <a href="#">found too</a>.
        We also do not provide instruction on how extensible markup language (XML) files are written, instead you can look
        <a href="http://www.xmlnews.org/docs/xml-basics.html">here</a>
        for a basic introduction. We recommend you use your favorite application that helps you to write XML files. The following programs
        work on most operating systems and help to spot errors and inconsistencies in the code you write:
      </p>
    title: "Atlas Map Documentation"
    lead: "A comprehensive guide on creating maps and game modes for Atlas."
    atom: "Free & open-source, by Github."
    sublime: "$70, free download for evaluation of the product."
    lime: "Free & open-source, "
    brackets: "Free & open-source, by Adobe."
  modules:
    map:
      text: This is the main, root element the all maps must provide. Every subsequent element is nested inside the map element. Note that for an XML file to be valid, it must contain the %s header.
      attributes: Map Attributes
      attributes_name: The name of the map.
      attributes_version: The version of the map.
      attributes_description: A brief description of the map.
      semantic: Semantic version
    channels:
      text: This module is used to determine if players are allowed to use team/global chat.
      attributes: Channels Attributes
      team: If players are allowed to use team chat.
      global: If players are allowed to use global chat.
    phases:
      text: This module is used to automatically change the blocks of (and needed to repair) Destroyable objectives based on a delay and check.
      leakables: "A default set of phases used for all DTC maps can be included from <code>Shared/phases.xml</code>"
      attributes: Phases Attributes
      name: The name of the phase. (Used for display). This goes in the are directly under the definition tag. (See above)
      countdown: "The message that is used for the countdown that is displayed in chat and on the boss bar. <br>FORMAT: {0} = the name of the phase, {1} = the amount of time until the phase will be applied."
      change-success: The message that is displayed when the phase is successfully applied.
      change-fail: The message that is displayed when the phase fails to be applied.
      delay: Delay before the phase is applied.
      check: Check to be ran before the phase is applied.
      retry: Number of times the phase should be attempted to be re-applied if the check fails.
      retry-delay: Delay between retry attempts.
      fail-phase: Phase that will be applied if the check fails and there are no retry attempts remaining.
      pass-phase: Phase that will be applied if the check passes.
      materials:
        attributes: Find/Replace Attributes
        find: Materials to search for.
        replace: Single material to replace the found blocks with.
    decay:
      text: This module is used to automatically change blocks under players as they walk.
      area:
        attributes: Decay Area Attributes
        region: Region where decay/block phases should occur.
        delay: Delay after the last phase is applied for the blocks to fall. Delays below 1s will cause ghost blocks.
      phase:
        attributes: Decay Phase Attributes
        delay: Delay before this phase is applied. Delays below 1s will cause ghost blocks.
        material: Material to change the block to.
    leakables:
      text: Leakables are like monuments but contain a liquid inside that must be leaked in order to be marked as completed.
      attributes: Leakable Attributes
      leak-distance: Distance the liquid must leak from the bottom of the region in order for the objective to be marked as completed.
    destroyable:
      name: The name of the objective.
      materials: The materials that can be destroyed.
      owner: The owner of the objective.
      region: The region that encapsulates the objective.
      completed: The material that blocks change to once broken,
      fireworks: Spawn a firework effect and sound to players when a block is broken.
      completion: The percentage necessary to consider the objective complete
      destroyable: If the objective can be destroyed using TNT.
      repairable: If the objective can be repaired by its owner.
      points: The amount of points rewarded to the team who completes the objective.
      points-block: The amount of points rewarded to a team when a player breaks a block.
      break-check: Check to be ran to see if the player can break the objective.
      repair-check: Check to be ran to see if the player can repair the objective.
      phase: First phase that the objective should attempt to switch to.
      any-repair: If any block can be used to repair the objective.
    broadcasts:
      text: This module can be used to display periodic messages in game.
      attributes: Broadcast Attributes
      format: "Format of the broadcast."
      interval: "The time between broadcasts."
      repetitions: "Max number of times a broadcast should be displayed."
      check: "Check to be ran before the broadcast is displayed. If not displayed, the repetition count will not be effected."
      formats:
        format: "Broadcast Format"
        text: "These pre-defined formats help you quickly format broadcasts in game."
    resource-packs:
      text: This module is used to request a custom resource pack during matches.
      pack:
        attributes: Resource Pack Attributes
        name: The name of the resource pack.
        url: Direct URL of the resource pack. (Zip folder)
      request:
        attributes: Resource Pack Request Attributes
        id: ID of the resource pack to request.
        force: If the pack is required in order for the player to join teams.
    kits:
      text: Kits are selectable loadouts that a player can select using a GUI or a command.
      attributes: Kit Attributes
      name: The name of the kit.
      desc: The description of the kit.
      icon: The icon of the kit used for the menu.
      loadout: Loadout that the kit should apply.
      default: If this kit is the default kit.
      ability:
        text: Kit Abilities
        desc: Kit abilities are special modifiers that are given to players who have the kit.
        jump:
          text: Double Jump Ability
          desc: This ability allows the player to jump higher than normal.
          attributes: Double Jump Attributes
          push: How far forward the player should go.
          icarus: How high the player should go.
        health:
          text: Health Effect Ability
          desc: This ability applies a potion effect to a player when they reach a certain health.
          attributes: Health Effect Attributes
          effect: Effect to apply to the player.
          health: Health level that will trigger the effect.
    authors:
      text: The authors element is provided to give credit to the people that made contributions to the creation of a map. Their minecraft usernames are listed in a variety of locations while the map is being played.
      attributes: Author Attributes
      attributes_uuid: The Minecraft UUID that identifies a player.
      attributes_role: The role this author played in the creation of the map.
    includes:
      text: >
        Includes are used to split a large and redundant configuration file into multiple smaller files. %{tag}
        elements should only be found directly as a child of the main %{tag2} element.
      attributes: "Include Attributes"
      src-desc: "The path to another map configuration file."
      local-desc: "If set to to true, it will search for the import in the same directory as the map.xml, otherwise it searches in the shared maps directory."
    teams:
      text: "This module is used to define how many and what attributes teams should possess in the match."
      name: "Note that the team name is not an attribute but rather is defined as text within the element. Team names should be localized, short, easy to remember and not contain "
      attribute_color: "The color of the team."
      attribute_min: "The minimum number of players on the team for the match to start."
      attribute_max: "The soft maximum number of players allowed on the team."
      attribute_max2: "Premium users and staff are able to join beyond this value."
      attribute_max_overfill: "The maximum number of players allowed on the team."
    attributes:
      id: "The globally unique identifier used to reference this element from elsewhere."
      team_color: "Team color"
    regions:
      text: "The regions element is used to store a collection of regions that can be referenced elsewhere by their ID."
      attribute: "A variety of attributes depending on the type of region."
      types: 'There are a variety of regions to utilize that differ in shape. The "Bounded" tag are referenced specifically in other parts of the documentation to indicate that type of regions is required by the element.'
      point: "A point is a single location, designated by its x, y and z coordinates, provided as text within the element. There are no attributes necessary."
      bounded_note: "* This region is only considered bounded if the referenced region is bounded.."
      reference: "Region Reference"
    spawns:
      text: "Spawns are regions where players spawn into the map upon joining or respawning after death."
      attributes: "Spawn Attributes"
      attributes_team: "The team of which this spawn should apply."
      attributes_region: "The region into which players should spawn."
      attributes_region2: "This is only used if regions is not specified within the spawn element."
      attributes_regions: "The regions into which players should spawn."
      attributes_look: "The coordinate that the player looks at when spawned."
      attributes_look2: "This value overrides the pitch and yaw attributes."
      attributes_yaw: "The yaw (horizontal angle) the player looks when spawned."
      attributes_pitch: "The pitch (vertical angle) the player looks when spawned."
      regions: Spawn Regions
      regions_text: "Regions can be provided within a spawn element. These inline regions can have a yaw or pitch associated with them that overrides the spawn element's yaw and pitch."
      selection_mode: "Selection Mode"
      attributes_mode: "Modifies which region is selected for this spawn point."
      selection_random: "A random region is selected."
      selection_safe: "The region that is most isolated from enemy teams or players is selected."
      selection_spread: "The region that is most isolated from all in-game players is selected."
      respawn_behavior: "Respawn Behavior"
      spawns_attributes: "Spawns Attributes"
      attributes_respawn_delay: "The minimum amount of time a player must wait to respawn."
      attributes_auto_respawn: "Enable auto respawning, disabling the typical punch to respawn feature."
      attributes_respawn_freeze: "When enabled, the player is frozen while respawning. Otherwise they can spectate the match."
      respawn_behavior_text: "After a player dies, they typically enter a state where they are expected to respawn back into the match. This state can be customized to a certain extent using attributes in this module."
    checks:
      check: "Check"
      text: 'Checks are utilized by different modules to selectively filter some event. Each check when processed results in either allowing, denying or ignoring that event.'
      examples:
        examples: 'Examples'
        text: 'Below are some examples of checks with explanations of what they perform.'
      variables:
        variables: "Variables"
        text: "Variables are different sources of information that a check can be supplied with in order to narrow down the scope of what is being checked against.
        Some examples of this are what the weather currently is, the type of block a player is placing, or the type of entity that is attacking a player."
        attacker-desc: "A wrapper variable that contains player and location information about the cause of an attack."
        damage-desc: "The type of damage inflicted on a player."
        entity-desc: "The type of entity that the check is being performed against."
        item-desc: "The type of item that the check is being performed against. This variable includes all of an item's attributes."
        location-desc: "The location in the world where the action is taking place."
        material-desc: "Similar to the item variable but only includes the material of the item (or block) being checked against."
        player-desc: "The player who is performing the checked action. This holds all information about a player but is never used to find a specific player by name."
        spawn-desc: "Reason the entity being checked spawned."
        victim-desc: "A wrapper variable that contains player and location information about the victim of the attack."
      static:
        static: "Static Checks"
        text: "These are helper checks that will always return the same value."
        always-desc: "Always passes"
        never-desc: "Always fails"
      types:
        types: "Check Types"
        text:
          <p>
            There are many different types of checks that can be applied to different in-game events. These checks can also be combined and negated (as stated below). Each check takes one or more of the variables listed above.
            <code>NOTE:</code>
            All of the tag names should be in lower case.
          </p>
        attacker-desc: "A wrapper check that contains player information about the cause of an attack."
        carrying-desc: "Checks the type of item a player is holding in their inventory."
        carrying-notes: "Written exactly like an item tag in a loadout."
        damage-desc: "Checks the type of damage a player is receiving."
        entity-desc: "Checks the type of entity that is causing the event."
        holding-desc: "Checks the type of item a player is holding in their hand."
        holding-notes: "Written exactly like an item tag in a loadout."
        inside-desc: "Checks if the player is in a certain region."
        inside-notes: "Region is defined by ID"
        item-desc: "Checks the type of item involved in the event."
        item-notes: "Written exactly like an item tag in a loadout."
        material-desc: "Checks the type of material involved in the event."
        material-notes: "Only checks type of item."
        objective-desc: "Checks to see if an objective is complete."
        objective-notes: "A team ID can be supplied to check if a team completed the objective."
        random-desc: "Randomly returns true based on the supplied amount of randomness."
        random-notes: "Randomness should be written as a number between 0 and 1 (The higher the number, the greater chance of it happening)."
        sometimes-desc: "Helper method for the above check with a randomness of 0.5	"
        spawn-desc: "Checks the reason an entity spawned."
        team-desc: "Checks the team the player is on who is causing the event."
        time-desc: "Checks the match time in comparison with the supplied value."
        time-notes: "A `compare` attribute can be added to change the comparison method (Default '=')"
        victim-desc: "A wrapper check that contains player information about the victim of an attack."
        wearing-desc: "Checks the type of item a player is wearing in any of their amor slots."
        wearing-notes: "Written exactly like an armor tag in a loadout."
        weather-desc: "Checks the weather in the match world."
        weather-notes: "Types of weather are DOWNFALL and CLEAR"
      combinations:
        combinations: "Combinations"
        text: "These are elements used to combine checks in order to broaden (or narrow) the result scope."
        all-desc: "Only passes if all of the checks inside the tag pass."
        any-desc: "Passes if any of the checks inside the tag pass."
      modifiers:
        modifier: "Modifier"
        modifiers: "Result Modifiers"
        text: "These are elements used to modify the result of checks."
        allow-desc: "Only passes if the enclosed check is checked and passes."
        deny-desc: "Only passes if the enclosed check is checked and does not pass."
        not-desc: "Inverts the result of the enclosed check."
    compasses:
      attributes: "Compass Attributes"
      text: "<p>
              The compass module is used to set the location of a player's compass based on different conditions.
            </p>"
      text-2: <p>
                The module is defined by the
                <code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compasses</span><span class="token punctuation">/&gt;</span></span></code>
                tag. Multiple compasses can be defined in this tag and checks can be used in order to determine who the compasses points to.
              </p>
      target-desc: "The location for the compass to target. You can also provide <code>enemy</code> which will target the nearest enemy."
      check-desc: "Check to be run on the player before targeting them."
    damage:
      text-1: "Use this module to disable damage across the entire map."
      text-2: <p>
              The
              <code class=" language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attacker</span><span class="token punctuation">&gt;</span></span></code>
              sub check can be used to determine information about the person who inflicted the damage.
              You can also check for location and any information related to the player who is being damaged.
            </p>
    elimination:
      text: "Use this module to limit the number of lives a player has on the map."
      attributes: "Elimination Attributes"
      lives-desc: "The amount of lives each player has."
    loadouts:
      text: "You can use this module to create sets of items and other player attributes that can be given to players at different times."
      root: "The Root Element"
      root-attributes: "Loadout Attributes"
      parent-desc: "Use this to reference another loadout that this loadout should inherit attributes from."
      force-desc: "If the items should be forced into already occupied item slots."
      item:
        title: "Items"
        text: "Items can have many attributes, and are the main element of loadouts."
        attributes: "Item Attributes"
        slot-desc: "Slot in the inventory where the item should be placed. (If no slot is specified, the item will be put in the first available slot)"
        material-desc: "The material of the item."
        damage-desc: "The damage value of the item. (This can be used to color wool or to change the durability of a pickaxe.)"
        amount-desc: "The amount of the item to be given to the player. (Use -1 for infinite stacks)"
        unbreakable-desc: "If the item should never run out of durability."
        flags-desc: "The flags that should be applied to the item. Separate each flag with a <code>,</code>"
        color-desc: "The color to be applied to the item. (This item must be a colorable item, or a parser error will be thrown)"
        team-color-desc: "If the player's team color should be used to color the item. This will override the other color attribute"
        potion-type-desc: "The type of the potion that will be displayed. (This will not override the effects added by the <code>effects</code> tag)"
        enchantment:
          attributes: "Enchantment Attributes"
          type: "The type of enchantment to apply to the item."
          level: "The level of the enchantment to be applied to the item."
        effect:
          attributes: "Effect Attributes"
          type: "The type of the effect that the potion will cause."
          amplifier: "The amplifier of the potion effect."
          duration: "The duration of the effect."
        banner:
          text: "Banner designs can also be created via XML, and can be combined to create complex designs. Designs are applied in the order that they are written."
          attributes: "Banner Attributes"
          pattern: "The name of the type of pattern to be applied."
          color: "The color of the pattern."
        projectile-desc: "ID of the custom projectile to be applied to the item."
      helper:
        armor: "Armor slot names can be used instead of the <code>item</code> tag in order to simplify putting items in armor slots."
      head: "You can use this tag to give player heads in loadouts. UUIDs are required"
      effect:
        attributes: "Effect Attributes"
        type: "The type of the effect that the player will receive."
        amplifier: "The amplifier of the effect."
        duration: "The duration of the effect."
      compass: "Set the player's compass target to a fixed position. (The compass module will override this)"
      glow: "Use this to achieve the glowing effect as if a player was shot by a spectral arrow. (1.9 ONLY)"
      weather: "Use this to set the player's personal weather state."
      number-action: "You can use number actions for the below tags."
      time: "You can use this module to set the player's personal time."
      health:
        attributes: "Health Modifiers"
        current: "Set the player's current health."
        max: "Set the player's maximum health."
        scale: "Set the player's health scale."
      food:
        attributes: "Food Modifiers"
        level: "Set the player's level of hunger."
        saturation: "Set the player's amount of saturation. (This is the value that represents amount of hunger above full)"
        exhaustion: "Set the player's level of exhaustion (This ranges from 0.0 to 4.0. When the exhaustion level reaches above 4.0 it will get subtracted by 4.0 and subtracts 1 point of hunger or saturation.)"
      exp:
        attributes: "Experience Modifiers"
        level: "Set the player's experience level. (This is the number above the bar)"
        points: "Set the player's experience points. (This is the value on the bar)"
        total: "Set the player's total experience level. (This will override both of the above values)"
      speed:
        attributes: "Speed Modifiers"
        fly: "Set the player's speed of flight"
        walk: "Set the player's walk speed."
    localization:
      text: "Localization is a requirement for all maps to accepted, we ask that you <strong>DO NOT</strong> simply google translate the localizations and if you need assistance translating your messages, to ask the translation team. <br><br>Localizations are defined inside of this tag and can be as deeply nested as need be. <br><br>
            Each new nesting is denoted by a <code>.</code> when referencing the locale in other parts of the XML. <br><br> Default localized items can be found <a href='https://maps.avicus.net/atlas/Shared/locales.xml'>here.</a>"
      attributes: "Locale Attributes"
      lang: "The language of the translated text."
      country: "The country of the translated text (For example, to use Canadian English,  you would define the lang as <code>en</code> and the country as <code>ca</code>)."
    results:
      text: "The results module can be used to determine how and when a match should end, and how the winner should be decided."
      win-attributes: "Win Attributes"
      scenario: "The scenario that should be executed if the check passes."
      scenarios: "Scenarios"
      scenario-text: "Scenarios are what course Atlas will take to determine a winner of a match. There are currently only 2 supported scenario results."
      places: "This attribute determines how many win places will be displayed and how many places of winners will receive some type of reward. This only works with the objectives result type and it is possible for multiple teams to score in the same place."
      scenario-types: "Scenario Types"
      objectives: "The objectives result type will choose the winner based on which team has the most objectives. This can also result in a match tie."
      team: "The team result type will reward the win to the team specified."
      check: "The check that needs to pass in order for the result to execute. The check can be referenced by ID or placed inside of the tag."
    zones:
      zone-attributes: "Zone Attributes"
      check:
        text: "Checks can be used to filter what players are allowed to to in zones. Checks can be defined as a zone attribute, or can be defined as sub tags."
        checks: "Checks"
        enter: "This check is applied to all players before they are allowed to enter the zone."
        leave: "This check is applied to all players before they are allowed to leave the zone."
        modify: "This check is applied to all players before they are allowed to place/break blocks and use items in the zone."
        place: "This check is applied to all players before they are allowed to place blocks in the zone."
        break: "This check is applied to all players before they are allowed to break blocks in the zone."
        use: "This check is applied to all players before they are allowed to use items (such as buckets) in the zone."
      sub:
        text: "Zone Sub-Elements"
        message:
          message: "Failure Message"
          text: "This defines the message that is displayed if a player tries to do something they cannot."
          types: "Format Types"
        scorebox:
          scorebox: "Score Box"
          text: "A score box is an area of a map that rewards points to a team when entered by a player."
          attributes: "Score Box Attributes"
          check: "Check to be ran to determine if the player should receive a reward."
          points: "The amount of points to be rewarded to a player who enters the box."
          growth: "The multiplier of points after each reward."
          rewards:
            rewards: "Item Rewards"
            text: "Item rewards are special amounts of points given to players for having certain items in their inventory."
            text-2: "The points attribute of the tag determines how many points extra should be rewarded for having the item."
        portal:
          portal: "Portal"
          attributes: "Portal Attributes"
          text: "Portals teleport players to locations on the map when they are entered."
          check: "Check to be ran to determine if the player should be teleported."
          destination: "The destination of the portal."
          sound: "If the enderman teleport sound should be played on teleport."
          reset-velocity: "If the player's velocity should be reset when they are teleported."
          heal: "If the player should be healed to max health after they are teleported."
          feed: "If the player should be fed after they are teleported."
          look: "Location the player should be facing when they leave the portal."
          yaw: "Yaw of the player when they are teleported."
          pitch: "Pitch of the player when they are teleported."
        post:
          post: "Flag Post"
          attributes: "Post Attrivutes"
          text: "These define where flags should be placed."
          check: "Check to be ran to determine if the player can pickup the flag."
          yaw: "Yaw orientation of the banner."
        net:
          net: "Flag Capture Net"
          attributes: "Net Attributes"
          text: "Nets are locations that flags can be captured at. A flag can have multiple net possibilities, and nets do not have to be bound to teams."
          owner: "Owner of the net."
          points: "Points to be rewarded to the player who captures the flag."
          check: "Check to be ran to determine if the player can capture the flag at this net."
          respawn-post: "Post that the flag should respawn at if it is captured at this net. If no post is specified, the flag will return to it's previous post."
          respawn-together: "If all of the flags enclosed by the <code>flags</code> element should wait until all are captured to respawn, or respawn directly after capture."
    chests:
      text: "Chest generators are used to fill the contents of chests in a region based on various factors automatically or with a refill delay."
      attributes:
        text: "Main Generator Attributes"
        region: "The region that contains the chests to fill."
        clear: "If the chest's contents should be cleared before population begins."
        min: "Minimum stack size of items that will be generated."
        max: "Maximum stack size of items that will be generated."
        regenerate-count: "Amount of times the chest should regenerate its items."
        regenerate-countdown: "Duration to wait between regenerate. (This is the timer displayed over chests.)"
        allow-duplicates: "If multiple items of the same type are selected by the randomizer, if both should be used."
        check: "Check to be ran before population begins."
      items:
        text: "Item Generators"
        desc: "These are groups of items that carry the same chance of being applied to a chest. If no min/max values are applied here, they will be inherited from above."
        attributes:
          text: "Item Generator Attributes"
          weight: "Chance items from this list will be used."
  references:
    colors:
      desc: The following colors can be used for teams.
      color: Color
      aqua: This should be reserved for spectator teams.
      green: A similar and preferred alternative is often %s.
      lime: Should not be used in conjunction with %s due to their similarities.
      wool: The following colors can be used for wool.

---
en:
  generic:
    note: "NOTE:"
  table:
    name: "Name"
    description: "Description"
    information: "Information Type"
    type: "Type"
    notes: "Notes"
  pages:
    modules: Modules
    references: References
    contribute: Contribute
    examples: Examples
    maps: Maps
    map: Map
    authors: Authors
    includes: Includes
    teams: Teams
    spawns: Spawns
    regions: Regions
    objectives: Objectives
    loadouts: Loadouts
    events: Events
    conditions: Conditions
    triggers: Triggers
    monuments: Monuments
    hills: Hills
    flags: Flags
    colors: Colors
    wools: Wools
    checks: "Checks"
    world: "World"
    zones: "Zones"
    localization: "Localization"
    items_and_drops: "Items & Drops"
    compasses: "Compasses"
    damage: "Damage"
    elimination: "Elimination"
    kills-deaths: "Kills/Deaths"
    projectiles: "Custom Projectiles"
  home:
    main:
      Atlas Game Manager is a Minecraft server modification for
      <a href="https://spigotmc.org">Spigot</a>
      that powers multiplayer, objective-based game modes within Minecraft. Much like the
      <a href="http://www.forgehub.com/">Forge</a>
      game mode of the popular video game franchise,
      <a href="https://www.halowaypoint.com">Halo</a>,
      one can create their own game modes through modifying the actual layout and design of the world, spawn points, team colors, game rules, weapons, tools, objectives and more.
      Though unlike in Halo Forge, Minecraft is designed around building and design, which enables Atlas map developers to create completely unique maps not based around
      a pre-existing map. Atlas is also an ever- evolving platform that is driven by the community and the developers behind it.
    about: >
      <p>
        This website documents how to create your own maps for the Atlas plugin. Each map has two components:
      </p>
      <ol>
        <li>
          Minecraft world containing
          <code>level.dat</code>
          and the
          <code>regions</code>
          folder.
        </li>
        <li>
          The XML map configuration file,
          <code>map.xml</code>
          . This defines the elements of the map such as spawn points, team colors, names, and more.
        </li>
      </ol>
      <p>
        This website primarily focuses on the latter, but a tutorial and guidelines for creating an Atlas map world can be
        <a href="#">found too</a>.
        We also do not provide instruction on how extensible markup language (XML) files are written, instead you can look
        <a href="http://www.xmlnews.org/docs/xml-basics.html">here</a>
        for a basic introduction. We recommend you use your favorite application that helps you to write XML files. The following programs
        work on most operating systems and help to spot errors and inconsistencies in the code you write:
      </p>
    title: "Atlas Map Documentation"
    lead: "A comprehensive guide on creating maps and game modes for Atlas."
    atom: "Free & open-source, by Github."
    sublime: "$70, free download for evaluation of the product."
    lime: "Free & open-source, "
    brackets: "Free & open-source, by Adobe."
  modules:
    map:
      text: This is the main, root element the all maps must provide. Every subsequent element is nested inside the map element. Note that for an XML file to be valid, it must contain the %s header.
      attributes: Map Attributes
      attributes_name: The name of the map.
      attributes_version: The version of the map.
      attributes_description: A brief description of the map.
      semantic: Semantic version
    authors:
      text: The authors element is provided to give credit to the people that made contributions to the creation of a map. Their minecraft usernames are listed in a variety of locations while the map is being played.
      attributes: Author Attributes
      attributes_uuid: The Minecraft UUID that identifies a player.
      attributes_role: The role this author played in the creation of the map.
    includes:
      text: >
        Includes are used to split a large and redundant configuration file into multiple smaller files. %{tag}
        elements should only be found directly as a child of the main %{tag2} element.
    teams:
      text: "This module is used to define how many and what attributes teams should possess in the match."
      name: "Note that the team name is not an attribute but rather is defined as text within the element. Team names should be localized, short, easy to remember and not contain "
      attribute_color: "The color of the team."
      attribute_min: "The minimum number of players on the team for the match to start."
      attribute_max: "The soft maximum number of players allowed on the team."
      attribute_max2: "Premium users and staff are able to join beyond this value."
      attribute_max_overfill: "The maximum number of players allowed on the team."
    attributes:
      id: "The globally unique identifier used to reference this element from elsewhere."
      team_color: "Team color"
    regions:
      text: "The regions element is used to store a collection of regions that can be referenced elsewhere by their ID."
      attribute: "A variety of attributes depending on the type of region."
      types: 'There are a variety of regions to utilize that differ in shape. The "Bounded" tag are referenced specifically in other parts of the documentation to indicate that type of regions is required by the element.'
      point: "A point is a single location, designated by its x, y and z coordinates, provided as text within the element. There are no attributes necessary."
      bounded_note: "* This region is only considered bounded if the referenced region is bounded.."
      reference: "Region Reference"
    spawns:
      text: "Spawns are regions where players spawn into the map upon joining or respawning after death."
      attributes: "Spawn Attributes"
      attributes_team: "The team of which this spawn should apply."
      attributes_region: "The region into which players should spawn."
      attributes_region2: "This is only used if regions is not specified within the spawn element."
      attributes_regions: "The regions into which players should spawn."
      attributes_look: "The coordinate that the player looks at when spawned."
      attributes_look2: "This value overrides the pitch and yaw attributes."
      attributes_yaw: "The yaw (horizontal angle) the player looks when spawned."
      attributes_pitch: "The pitch (vertical angle) the player looks when spawned."
      regions: Spawn Regions
      regions_text: "Regions can be provided within a spawn element. These inline regions can have a yaw or pitch associated with them that overrides the spawn element's yaw and pitch."
      selection_mode: "Selection Mode"
      attributes_mode: "Modifies which region is selected for this spawn point."
      selection_random: "A random region is selected."
      selection_safe: "The region that is most isolated from enemy teams or players is selected."
      selection_spread: "The region that is most isolated from all in-game players is selected."
      respawn_behavior: "Respawn Behavior"
      spawns_attributes: "Spawns Attributes"
      attributes_respawn_delay: "The minimum amount of time a player must wait to respawn."
      attributes_auto_respawn: "Enable auto respawning, disabling the typical punch to respawn feature."
      attributes_respawn_freeze: "When enabled, the player is frozen while respawning. Otherwise they can spectate the match."
      respawn_behavior_text: "After a player dies, they typically enter a state where they are expected to respawn back into the match. This state can be customized to a certain extent using attributes in this module."
    checks:
      check: "Check"
      text: <p>
              Checks are different types of methods that can be used in order to narrow down the possible chances for an event to occur.
            </p>
            <p>
              An example of this would be narrowing down the players who can capture a flag, enter a zone, or break blocks.
            </p>
            <p>
              All checks are defined inside the
              <code class='language-xml'><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>checks</span><span class='token punctuation'>&gt;</span></span></code>
              tag and then referenced by id in the rest of the XML.
            </p>
      variables:
        variables: "Variables"
        text: "Variables are different sources of information that a check can be supplied with in order to narrow down the scope of what is being checked against.
        Some examples of this are what the weather currently is, the type of block a player is placing, or the type of entity that is attacking a player."
        attacker-desc: "A wrapper variable that contains player and location information about the cause of an attack."
        damage-desc: "The type of damage inflicted on a player."
        entity-desc: "The type of entity that the check is being performed against."
        item-desc: "The type of item that the check is being performed against. This variable includes all of an item's attributes."
        location-desc: "The location in the world where the action is taking place."
        material-desc: "Similar to the item variable but only includes the material of the item (or block) being checked against."
        player-desc: "The player who is performing the checked action. This holds all information about a player but is never used to find a specific player by name."
        spawn-desc: "Reason the entity being checked spawned."
        victim-desc: "A wrapper variable that contains player and location information about the victim of the attack."
      static:
        static: "Static Checks"
        text: "These are helper checks that will always return the same value."
        always-desc: "Always passes"
        never-desc: "Always fails"
      types:
        types: "Check Types"
        text:
          <p>
            There are many different types of checks that can be applied to different in-game events. These checks can also be combined and negated (as stated below). Each check takes one or more of the variables listed above.
            <code>NOTE:</code>
            All of the tag names should be in lower case.
          </p>
        attacker-desc: "A wrapper check that contains player information about the cause of an attack."
        carrying-desc: "Checks the type of item a player is holding in their inventory."
        carrying-notes: "Written exactly like an item tag in a loadout."
        damage-desc: "Checks the type of damage a player is receiving."
        entity-desc: "Checks the type of entity that is causing the event."
        holding-desc: "Checks the type of item a player is holding in their hand."
        holding-notes: "Written exactly like an item tag in a loadout."
        inside-desc: "Checks if the player is in a certain region."
        inside-notes: "Region is defined by ID"
        item-desc: "Checks the type of item involved in the event."
        item-notes: "Written exactly like an item tag in a loadout."
        material-desc: "Checks the type of material involved in the event."
        material-notes: "Only checks type of item."
        objective-desc: "Checks to see if an objective is complete."
        objective-notes: "A team ID can be supplied to check if a team completed the objective."
        random-desc: "Randomly returns true based on the supplied amount of randomness."
        random-notes: "Randomness should be written as a number between 0 and 1 (The higher the number, the greater chance of it happening)."
        sometimes-desc: "Helper method for the above check with a randomness of 0.5	"
        spawn-desc: "Checks the reason an entity spawned."
        team-desc: "Checks the team the player is on who is causing the event."
        time-desc: "Checks the match time in comparison with the supplied value."
        time-notes: "A `compare` attribute can be added to change the comparison method (Default '=')"
        victim-desc: "A wrapper check that contains player information about the victim of an attack."
        wearing-desc: "Checks the type of item a player is wearing in any of their amor slots."
        wearing-notes: "Written exactly like an armor tag in a loadout."
        weather-desc: "Checks the weather in the match world."
        weather-notes: "Types of weather are DOWNFALL and CLEAR"
      combinations:
        combinations: "Combinations"
        text: "These are elements used to combine checks in order to broaden (or narrow) the result scope."
        all-desc: "Only passes if all of the checks inside the tag pass."
        any-desc: "Passes if any of the checks inside the tag pass."
      modifiers:
        modifier: "Modifier"
        modifiers: "Result Modifiers"
        text: "These are elements used to modify the result of checks."
        allow-desc: "Only passes if the enclosed check is checked and passes."
        deny-desc: "Only passes if the enclosed check is checked and does not pass."
        not-desc: "Inverts the result of the enclosed check."
  references:
    colors:
      desc: The following colors can be used for teams.
      color: Color
      aqua: This should be reserved for spectator teams.
      green: A similar and preferred alternative is often %s.
      lime: Should not be used in conjunction with %s due to their similarities.
      wool: The following colors can be used for wool.
